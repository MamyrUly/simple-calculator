// import express from "express";
// import cors from "cors";

// const app = express();
// const PORT = 3000;

// app.use(cors());
// app.use(express.json());

// app.get("/", (req, res) => {
//   res.send("—Ä–∞–±–æ—Ç–∞–µ—Ç \n");
// });

// app.post("/calculate", (req, res) => {
//   const { num1, num2, operator } = req.body;

//   if (
//     typeof num1 !== "number" ||
//     typeof num2 !== "number" ||
//     isNaN(num1) ||
//     isNaN(num2)
//   ) {
//     return res.status(400).json({ error: "num1 –∏ num2 –Ω–µ —á–∏—Å–ª–∞" });
//   }

//   let result;

//   switch (operator) {
//     case "+":
//       result = num1 + num2;
//       break;
//     case "-":
//       result = num1 - num2;
//       break;
//     case "*":
//       result = num1 * num2;
//       break;
//     case "/":
//       if (num2 === 0) {
//         res.status(400).json({ error: "–Ω–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å" });
//       }
//       result = num1 / num2;
//       break;
//     default:
//       return res
//         .status(400)
//         .json({ error: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä" });
//   }

//   res.status(200).json({ result });
// });

// app.listen(PORT, () => {
//   console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
// });

export default function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" });
  }

  try {
    const { num1, num2, operator } =
      typeof req.body === "string" ? JSON.parse(req.body) : req.body;

    if (
      typeof num1 !== "number" ||
      typeof num2 !== "number" ||
      isNaN(num1) ||
      isNaN(num2)
    ) {
      return res.status(400).json({ error: "num1 –∏ num2 –Ω–µ —á–∏—Å–ª–∞" });
    }

    let result;

    switch (operator) {
      case "+":
        result = num1 + num2;
        break;
      case "-":
        result = num1 - num2;
        break;
      case "*":
        result = num1 * num2;
        break;
      case "/":
        if (num2 === 0) {
          return res.status(400).json({ error: "–Ω–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å" });
        }
        result = num1 / num2;
        break;
      default:
        return res.status(400).json({ error: "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä" });
    }

    console.log("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç:", result); // —ç—Ç–æ –ø–æ–ø–∞–¥—ë—Ç –≤ Vercel Function Logs
    res.status(200).json({ result });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ body:", e);
    res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞" });
  }
}
